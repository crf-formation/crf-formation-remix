generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  state     String    @default("CREATED")
  role      String    @default("USER")
  firstName String
  lastName  String
  password  Password?

  userPasswordToken                UserPasswordToken?
  pseUserPreparatoryWorks          PseUserPreparatoryWork[]
  usersOnPseFormation              UserOnPseFormation[]
  pseUserTechniques                PseUserTechnique[]
  pseUserConcreteCaseGroupStudents PseUserConcreteCaseGroupStudent[]
  pseConcreteCaseSituations        PseConcreteCaseSituation[]
  pseUserConcreteCases             PseUserConcreteCase[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserPasswordToken {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  token               String   @unique
  tokenExpirationDate DateTime

  createdAt DateTime @default(now())
}

model Place {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String // TODO: rename to name

  pseFormations PseFormation[]
}

model PseFormation {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String // TODO: rename to name

  state String

  from DateTime
  to   DateTime

  place   Place  @relation(fields: [placeId], references: [id])
  placeId String

  pseUserPreparatoryWorks PseUserPreparatoryWork[]
  userOnPseFormations     UserOnPseFormation[]
  pseUserTechniques       PseUserTechnique[]
  pseConcreteCaseSessions PseConcreteCaseSession[]
}

model PseModule {
  id String @id @default(cuid())

  name     String
  moduleId String @unique

  pseUserPreparatoryWorks PseUserPreparatoryWork[]
  pseTechniques           PseTechnique[]
}

model UserOnPseFormation {
  id String @id @default(cuid())

 // linked to
  formation   PseFormation @relation(fields: [formationId], references: [id])
  formationId String

  // linked to
  user   User   @relation(fields: [userId], references: [id])
  userId String

  role String @default("STUDENT")

  assignedAt DateTime @default(now())

  @@unique([formationId, userId])
}

model PseUserPreparatoryWork {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  formation   PseFormation @relation(fields: [formationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formationId String

  pseModule   PseModule @relation(fields: [pseModuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseModuleId String

  openingDate  DateTime
  realisedDate DateTime

  realised Boolean @default(false)

  @@unique([userId, formationId, pseModuleId])
}

model PseTechnique {
  id String @id @default(cuid())

  name String

  requiredForPse1 Boolean

  pseModule   PseModule @relation(fields: [pseModuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseModuleId String

  pseUserTechniques PseUserTechnique[]
}

model PseUserTechnique {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  formation   PseFormation @relation(fields: [formationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formationId String

  technique   PseTechnique @relation(fields: [techniqueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techniqueId String

  acquired Boolean @default(false)

  @@unique([userId, formationId, techniqueId])
}

model PseCompetence {
  id String @id @default(cuid())

  pseConcreteCaseTypes PseCompetencesOnPseConcreteCaseTypes[]
  pseUserConcreteCaseCompetence PseUserConcreteCaseCompetence[]
}

model PseConcreteCaseType {
  id String @id @default(cuid())
  name String
  competencesToEvaluate    PseCompetencesOnPseConcreteCaseTypes[]

  // linked to
  pseConcreteCaseSituation PseConcreteCaseSituation[]
  pseUserConcreteCases     PseUserConcreteCase[]
}

// ManyToMany explicit
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#explicit-many-to-many-relations
model PseCompetencesOnPseConcreteCaseTypes {
  pseCompetence       PseCompetence     @relation(fields: [pseCompetenceId], references: [id])
  pseCompetenceId     String

  pseConcreteCaseType   PseConcreteCaseType @relation(fields: [pseConcreteCaseTypeId], references: [id])
  pseConcreteCaseTypeId String

  assignedAt DateTime @default(now())

  @@id([pseCompetenceId, pseConcreteCaseTypeId])
}


model PseConcreteCaseGroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name  String

  // linked to
  pseConcreteCaseSession   PseConcreteCaseSession @relation(fields: [pseConcreteCaseSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSessionId String

	// contains
  students                       PseUserConcreteCaseGroupStudent[]

  // linked to
  pseSituationConcreteCaseGroups PseSituationConcreteCaseGroup[]
  pseUserConcreteCases           PseUserConcreteCase[]
}

model PseUserConcreteCaseGroupStudent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // parent
  pseConcreteCaseGroup   PseConcreteCaseGroup @relation(fields: [pseConcreteCaseGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseGroupId String
}

model PseConcreteCaseSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name  String
  state String

	// contains
  groups                         PseConcreteCaseGroup[]
  situations                     PseConcreteCaseSituation[]

  // parent
  formation   PseFormation @relation(fields: [formationId], references: [id])
  formationId String

  // linked to
  pseSituationConcreteCaseGroups PseSituationConcreteCaseGroup[]
}

model PseConcreteCaseSituation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // linked to
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId String

	// linked to
  pseConcreteCaseType   PseConcreteCaseType @relation(fields: [pseConcreteCaseTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseTypeId String

  // linked to
  pseConcreteCaseSession   PseConcreteCaseSession @relation(fields: [pseConcreteCaseSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSessionId String

	// contains
  pseConcreteCaseGroups PseSituationConcreteCaseGroup[]
}

model PseSituationConcreteCaseGroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  position Int @default(-1)

  // linked to
  pseConcreteCaseSession   PseConcreteCaseSession @relation(fields: [pseConcreteCaseSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSessionId String

  // linked to
  pseConcreteCaseGroup   PseConcreteCaseGroup @relation(fields: [pseConcreteCaseGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseGroupId String

  // linked to
  pseConcreteCaseSituation   PseConcreteCaseSituation @relation(fields: [pseConcreteCaseSituationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSituationId String
}

model PseUserConcreteCase {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  state    String
  selected Boolean @default(false)
  role     String

  // linked to
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // parent
  concreteCaseGroup   PseConcreteCaseGroup @relation(fields: [concreteCaseGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  concreteCaseGroupId String

  // linked to
  concreteCaseType   PseConcreteCaseType @relation(fields: [concreteCaseTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  concreteCaseTypeId String

  // contains
  competences PseUserConcreteCaseCompetence[]
}

model PseUserConcreteCaseCompetence {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  grade String

	// parent
  pseUserConcreteCase   PseUserConcreteCase @relation(fields: [pseUserConcreteCaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseUserConcreteCaseId String

  // linked to
  pseCompetence PseCompetence @relation(fields: [pseCompetenceId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  pseCompetenceId String
}
