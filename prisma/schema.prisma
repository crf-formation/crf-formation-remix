generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                         @id @default(cuid())
  email                        String                         @unique
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now()) @updatedAt
  state                        String                         @default("CREATED")
  role                         String                         @default("USER")
  firstName                    String
  lastName                     String
  password                     Password?
  UserPasswordToken            UserPasswordToken?
  PseGlobalUserPreparatoryWork PseGlobalUserPreparatoryWork[]
  UserOnPseGlobalFormation     UserOnPseGlobalFormation[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserPasswordToken {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  token               String   @unique
  tokenExpirationDate DateTime

  createdAt DateTime @default(now())
}

model Place {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String

  PseGlobalFormation PseGlobalFormation[]
}

model PseGlobalFormation {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String
  type  String

  from DateTime
  to   DateTime

  place   Place  @relation(fields: [placeId], references: [id])
  placeId String

  PseGlobalUserPreparatoryWork PseGlobalUserPreparatoryWork[]
  UserOnPseGlobalFormation     UserOnPseGlobalFormation[]
}

model PseGlobalModule {
  id String @id @default(cuid())

  name     String
  moduleId String @unique

  PseGlobalUserPreparatoryWork PseGlobalUserPreparatoryWork[]
}

model UserOnPseGlobalFormation {
  formation   PseGlobalFormation @relation(fields: [formationId], references: [id])
  formationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role String @default("STUDENT")

  assignedAt DateTime @default(now())

  @@id([formationId, userId])
}

model PseGlobalUserPreparatoryWork {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  formation   PseGlobalFormation @relation(fields: [formationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formationId String

  pseGlobalModule   PseGlobalModule @relation(fields: [pseGlobalModuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseGlobalModuleId String

  openingDate  DateTime
  realisedDate DateTime

  realised Boolean @default(false)

  @@unique([userId, formationId, pseGlobalModuleId])
}
