generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                           String                         @id @default(cuid())
  email                        String                         @unique
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now()) @updatedAt
  state                        String                         @default("CREATED")
  role                         String                         @default("USER")
  firstName                    String
  lastName                     String
  password                     Password?
  UserPasswordToken            UserPasswordToken?
  PseUserPreparatoryWork PseUserPreparatoryWork[]
  UserOnPseFormation     UserOnPseFormation[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserPasswordToken {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  token               String   @unique
  tokenExpirationDate DateTime

  createdAt DateTime @default(now())
}

model Place {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String

  PseFormation PseFormation[]
}

model PseFormation {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String

  state String

  from DateTime
  to   DateTime

  place   Place  @relation(fields: [placeId], references: [id])
  placeId String

  PseUserPreparatoryWork PseUserPreparatoryWork[]
  UserOnPseFormation     UserOnPseFormation[]
}

model PseModule {
  id String @id @default(cuid())

  name     String
  moduleId String @unique

  PseUserPreparatoryWork PseUserPreparatoryWork[]
}

model UserOnPseFormation {
  formation   PseFormation @relation(fields: [formationId], references: [id])
  formationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role String @default("STUDENT")

  assignedAt DateTime @default(now())

  @@id([formationId, userId])
}

model PseUserPreparatoryWork {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  formation   PseFormation @relation(fields: [formationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formationId String

  pseModule   PseModule @relation(fields: [pseModuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseModuleId String

  openingDate  DateTime
  realisedDate DateTime

  realised Boolean @default(false)

  @@unique([userId, formationId, pseModuleId])
}
