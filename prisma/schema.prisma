generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  email                  String                   @unique
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
  state                  String                   @default("CREATED")
  role                   String                   @default("USER")
  firstName              String
  lastName               String
  password               Password?

  userPasswordToken      UserPasswordToken?
  pseUserPreparatoryWorks PseUserPreparatoryWork[]
  userOnPseFormations     UserOnPseFormation[]
  pseUserTechniques       PseUserTechnique[]
  pseUserConcreteCaseGroupStudents PseUserConcreteCaseGroupStudent[]
  pseConcreteCaseSituations PseConcreteCaseSituation[]
  pseUserConcreteCases PseUserConcreteCase[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model UserPasswordToken {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  token               String   @unique
  tokenExpirationDate DateTime

  createdAt DateTime @default(now())
}

model Place {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String  // TODO: rename to name

  pseFormations PseFormation[]
}

model PseFormation {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String // TODO: rename to name

  state String

  from DateTime
  to   DateTime

  place   Place  @relation(fields: [placeId], references: [id])
  placeId String

  pseUserPreparatoryWorks PseUserPreparatoryWork[]
  userOnPseFormations     UserOnPseFormation[]
  pseUserTechniques       PseUserTechnique[]
}

model PseModule {
  id String @id @default(cuid())

  name     String
  moduleId String @unique

  pseUserPreparatoryWorks PseUserPreparatoryWork[]
  pseTechniques           PseTechnique[]
}

model UserOnPseFormation {
  id String @id @default(cuid())

  formation   PseFormation @relation(fields: [formationId], references: [id])
  formationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role String @default("STUDENT")

  assignedAt DateTime @default(now())

  @@unique([formationId, userId])
}

model PseUserPreparatoryWork {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  formation   PseFormation @relation(fields: [formationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formationId String

  pseModule   PseModule @relation(fields: [pseModuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseModuleId String

  openingDate  DateTime
  realisedDate DateTime

  realised Boolean @default(false)

  @@unique([userId, formationId, pseModuleId])
}

model PseTechnique {
  id String @id @default(cuid())

  name String

  requiredForPse1 Boolean

  pseModule   PseModule @relation(fields: [pseModuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseModuleId String

  pseUserTechniques PseUserTechnique[]
}

model PseUserTechnique {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  formation   PseFormation @relation(fields: [formationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formationId String

  technique   PseTechnique @relation(fields: [techniqueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techniqueId String

  acquired Boolean @default(false)

  @@unique([userId, formationId, techniqueId])
}

model PseCompetence {
  id String @id @default(cuid())

  pseConcreteCaseTypes PseConcreteCaseType[]
}

model PseConcreteCaseType {
  id String @id @default(cuid())

  name String

  competencesToEvaluate PseCompetence[]
}

model PseConcreteCaseGroup {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 

  name String
  state String

	pseConcreteCaseSession PseConcreteCaseSession @relation(fields: [pseConcreteCaseSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSessionId String

  students PseUserConcreteCaseGroupStudent[]

  pseSituationConcreteCaseGroups PseSituationConcreteCaseGroup[]
}

model PseUserConcreteCaseGroupStudent {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt  
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  pseConcreteCaseGroup PseConcreteCaseGroup @relation(fields: [pseConcreteCaseGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseGroupId String
}

model PseConcreteCaseSession {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 

  name String
  state String

  groups: PseConcreteCaseGroup[]
  situations: PseConcreteCaseSituation[]
}

model PseConcreteCaseSituation {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 

  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId String

  pseConcreteCaseType PseConcreteCaseType @relation(fields: [pseConcreteCaseTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseTypeId String

	pseConcreteCaseSession: PseConcreteCaseSession @relation(fields: [pseConcreteCaseSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSessionId String

	pseConcreteCaseGroups: PseSituationConcreteCaseGroup[]
}

model PseSituationConcreteCaseGroup {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 

  position Int @default(-1)
  
  pseConcreteCaseSession: PseConcreteCaseSession @relation(fields: [pseConcreteCaseSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSessionId String

  pseConcreteCaseGroup PseConcreteCaseGroup @relation(fields: [pseConcreteCaseGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseGroupId String

  pseConcreteCaseSituation PseConcreteCaseSituation @relation(fields: [pseConcreteCaseSituationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseConcreteCaseSituationId String
}


model PseUserConcreteCase {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

	concreteCaseGroup PseConcreteCaseGroup @relation(fields: [concreteCaseGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  concreteCaseGroupId String

	concreteCaseType PseConcreteCaseType  @relation(fields: [concreteCaseTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  concreteCaseTypeId String

	state String
	selected: Boolean @default(false)
	role String
 
	competences PseUserConcreteCaseCompetence[]
}

model PseUserConcreteCaseCompetence {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt  

  pseUserConcreteCase PseUserConcreteCase @relation(fields: [pseUserConcreteCaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pseUserConcreteCaseId String

	grade String
}

